// script.js

const CONTAINER = document.getElementById('jigsaw-container');
const SHUFFLE_BUTTON = document.getElementById('shuffle-button');
const IMAGE_URL = '851211.jpg'; 

// *** ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå ***
const ROWS = 6; 
const COLS = 4;
// **********************************

// ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
const TOTAL_WIDTH = 600;
const TOTAL_HEIGHT = 900;

let currentPieces = []; // ‡πÄ‡∏Å‡πá‡∏ö DOM element ‡∏Ç‡∏≠‡∏á‡∏ä‡∏¥‡πâ‡∏ô‡∏™‡πà‡∏ß‡∏ô
let selectedPiece = null; // ‡∏ä‡∏¥‡πâ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏¥‡πâ‡∏ô‡πÅ‡∏£‡∏Å

// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏¥‡πâ‡∏ô‡∏™‡πà‡∏ß‡∏ô
const PIECE_WIDTH = TOTAL_WIDTH / COLS;
const PIECE_HEIGHT = TOTAL_HEIGHT / ROWS;

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î grid ‡πÉ‡∏ô CSS ‡∏î‡πâ‡∏ß‡∏¢ JS ‡πÉ‡∏´‡πâ‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö COLS
CONTAINER.style.gridTemplateColumns = `repeat(${COLS}, 1fr)`;

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ä‡∏¥‡πâ‡∏ô‡∏™‡πà‡∏ß‡∏ô
function createPieces() {
    CONTAINER.innerHTML = ''; // ‡∏•‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô‡πÄ‡∏Å‡πà‡∏≤
    currentPieces = [];

    for (let r = 0; r < ROWS; r++) {
        for (let c = 0; c < COLS; c++) {
            const index = r * COLS + c;

            const piece = document.createElement('div');
            piece.classList.add('piece');
            piece.dataset.correctPos = index; // ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (0, 1, 2...)
            
            // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏†‡∏≤‡∏û‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á (Background Position)
            const bgX = -c * PIECE_WIDTH;
            const bgY = -r * PIECE_HEIGHT;
            piece.style.backgroundPosition = `${bgX}px ${bgY}px`;

            currentPieces.push(piece);
        }
    }
    
    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏•‡∏±‡∏ö
    selectedPiece = null;
    shufflePieces();
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏•‡∏±‡∏ö‡∏ä‡∏¥‡πâ‡∏ô‡∏™‡πà‡∏ß‡∏ô (Fisher-Yates Shuffle Algorithm)
function shufflePieces() {
    // ‡∏™‡∏•‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏ô Array
    for (let i = currentPieces.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [currentPieces[i], currentPieces[j]] = [currentPieces[j], currentPieces[i]];
    }
    
    // ‡∏ô‡∏≥‡∏ä‡∏¥‡πâ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏•‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏õ‡πÉ‡∏™‡πà‡πÉ‡∏ô container ‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÉ‡∏´‡∏°‡πà
    currentPieces.forEach(piece => CONTAINER.appendChild(piece));
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏ô‡∏∞
function checkWin() {
    // ‡∏î‡∏∂‡∏á NodeList ‡∏Ç‡∏≠‡∏á‡∏ä‡∏¥‡πâ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
    const finalOrder = Array.from(CONTAINER.children); 
    let isCorrect = true;

    for (let i = 0; i < finalOrder.length; i++) {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏•‡∏≥‡∏î‡∏±‡∏ö DOM (i) ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô data-correct-pos ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (parseInt(finalOrder[i].dataset.correctPos) !== i) {
            isCorrect = false;
            break;
        }
    }

    if (isCorrect) {
        alert('üéâ ‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏°‡∏≤‡∏Å! ‡∏ï‡πà‡∏≠‡∏à‡∏¥‡πä‡∏Å‡∏ã‡∏≠‡∏ß‡πå 24 ‡∏ä‡∏¥‡πâ‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÅ‡∏•‡πâ‡∏ß!');
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏•‡∏±‡∏ö‡∏ä‡∏¥‡πâ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
function swapPieces(pieceA, pieceB) {
    // ‡πÉ‡∏ä‡πâ Node.insertBefore ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏•‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏ô DOM
    const parent = pieceA.parentNode;
    
    // ‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏Ç‡∏≠‡∏á B
    const nextSiblingB = pieceB.nextSibling;
    
    // ‡∏™‡∏•‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
    parent.insertBefore(pieceB, pieceA);
    parent.insertBefore(pieceA, nextSiblingB);
}

// ******* Event Listeners *******

// 1. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏•‡∏±‡∏ö‡∏ä‡∏¥‡πâ‡∏ô‡∏™‡πà‡∏ß‡∏ô
CONTAINER.addEventListener('click', (event) => {
    const clickedPiece = event.target;
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ñ‡∏π‡∏Å‡∏ä‡∏¥‡πâ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏à‡∏¥‡πä‡∏Å‡∏ã‡∏≠‡∏ß‡πå‡∏à‡∏£‡∏¥‡∏á‡πÜ
    if (!clickedPiece.classList.contains('piece')) return; 

    if (selectedPiece === null) {
        // 1. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏¥‡πâ‡∏ô‡πÅ‡∏£‡∏Å
        selectedPiece = clickedPiece;
        selectedPiece.classList.add('selected');
    } else if (selectedPiece === clickedPiece) {
        // 2. ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏¥‡πâ‡∏ô‡πÄ‡∏î‡∏¥‡∏°
        selectedPiece.classList.remove('selected');
        selectedPiece = null;
    } else {
        // 3. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏¥‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á -> ‡∏™‡∏•‡∏±‡∏ö
        swapPieces(selectedPiece, clickedPiece);
        selectedPiece.classList.remove('selected'); // ‡πÄ‡∏≠‡∏≤‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡∏≠‡∏≠‡∏Å
        selectedPiece = null; // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        checkWin(); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏ô‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏™‡∏•‡∏±‡∏ö
    }
});

// 2. ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°/‡∏™‡∏•‡∏±‡∏ö‡∏ä‡∏¥‡πâ‡∏ô‡∏™‡πà‡∏ß‡∏ô
SHUFFLE_BUTTON.addEventListener('click', createPieces);

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤
createPieces();